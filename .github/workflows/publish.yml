name: "Publish Release"

on:
  release:
    types: [published]

permissions:
  contents: write
  actions: read

jobs:
  update-channel:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Install and cache APT packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: createrepo-c jq
          version: 1.0

      - name: Determine release channel
        id: metadata
        run: |
          if [[ "${{ github.event.release.tag_name }}" == *"beta"* ]]; then
            echo "channel=beta" >> $GITHUB_OUTPUT
          else
            echo "channel=stable" >> $GITHUB_OUTPUT
          fi

      - name: Set up environment
        run: |
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "CHANNEL=${{ steps.metadata.outputs.channel }}" >> $GITHUB_ENV

      - name: Update version HEAD
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const { release } = context.payload

            const channel = "${{ env.CHANNEL }}";
            const targetDir = path.join('.', channel);
            const targetFile = path.join(targetDir, 'latest.json');

            const asset = release.assets.find(a => a.name === 'latest.json');

            if (!asset) {
              core.setFailed('Could not find "latest.json" asset on the release.');
              process.exit(1);
            }

            const download = await github.request(`GET ${asset.url}`, {
              headers: { accept: 'application/octet-stream' }
            });

            fs.mkdirSync(targetDir, { recursive: true });
            fs.writeFileSync(targetFile, Buffer.from(download.data, 'binary'));

      - name: Download release assets
        id: assets
        run: |
          TMPDIR=$(mktemp -d)
          
          gh release download "${{ env.VERSION }}" \
            --pattern "*.deb" \
            --dir "$TMPDIR"
          DEB_PATH=$(find "$TMPDIR" -name "*.deb" | head -n1)

          gh release download "${{ env.VERSION }}" \
            --pattern "*.rpm" \
            --dir "$TMPDIR"
          RPM_PATH=$(find "$TMPDIR" -name "*.rpm" | head -n1)

          echo "deb_path=$DEB_PATH" >> $GITHUB_OUTPUT
          echo "rpm_path=$RPM_PATH" >> $GITHUB_OUTPUT
          echo "tmpdir=$TMPDIR" >> $GITHUB_OUTPUT

      - name: Update AUR distribution
        uses: addnab/docker-run-action@v3
        with:
          image: archlinux:base-devel
          options: >
            -v ${{ github.workspace }}:/workspace
            -v ${{ steps.assets.outputs.tmpdir }}:/host-tmp
          run: |
            set -euo pipefail
            useradd -m -u 1000 builduser
            chown -R builduser:builduser /workspace /host-tmp
            su builduser <<'EOF'
            cd /workspace
            ./scripts/update-aur.sh \
              "${{ env.VERSION }}" \
              "${{ env.CHANNEL }}" \
              "/host-tmp/$(basename "${{ steps.assets.outputs.deb_path }}")"
            EOF

      - name: Fix user permissions
        run: sudo chown -R $UID:$UID . ${{ steps.assets.outputs.tmpdir }}

      - name: Update APT distribution
        run: |
          ./scripts/update-apt.sh \
            "${{ env.CHANNEL }}" \
            "${{ steps.assets.outputs.deb_path }}"

      - name: Update RPM distribution
        run: |
          ./scripts/update-rpm.sh \
            "${{ env.CHANNEL }}" \
            "${{ steps.assets.outputs.rpm_path }}"

      - name: Publish to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: ${{ env.CHANNEL == 'stable' && 'garoa' || 'garoa-beta' }}
          pkgbuild: ./${{ env.CHANNEL }}/aur/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: 'ci: bump version to ${{ env.VERSION }}'
          force_push: 'true'
          assets: |
            ./${{ env.CHANNEL }}/aur/*.install
            ./${{ env.CHANNEL }}/aur/.SRCINFO

      - name: Cleanup
        if: always()
        run: |
          rm -rf "${{ steps.assets.outputs.tmpdir }}"

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -A

          if git diff --cached --quiet; then
            echo "Nothing to commit."
            exit 0
          fi

          git commit -m "ci: bump version to \`${{ env.VERSION }}\`"
          git push
